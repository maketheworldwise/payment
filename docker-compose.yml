version: '3'
services:
  mysql:
    image: mysql:8.0.23
    networks:
      - payment_network
    volumes:
      - ./db/conf.d:/etc/mysql/conf.d
      - ./db/data:/var/lib/mysql
      - ./db/initdb.d:/docker-entrypoint-initdb.d
    env_file: .env
    ports:
      - '3306:3306'
    environment:
      - TZ=Asia/Seoul
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=payment

  membership:
    image: payment-membership:0.0.1
    networks:
      - payment_network
    ports:
      - '8081:8080'
    depends_on:
      - mysql
    environment:
        - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/payment?useSSL=false&allowPublicKeyRetrieval=true
        - SPRING_DATASOURCE_USERNAME=user
        - SPRING_DATASOURCE_PASSWORD=password
        - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
        - SPRING_JPA_HIBERNATE_DDL_AUTO=update
        - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
        - LOGGING_TOPIC=org.service.logging.out.stdout

  banking:
    image: payment-banking:0.0.1
    networks:
      - payment_network
    ports:
      - '8082:8080'
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/payment?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=org.service.logging.out.stdout
      - SERVICE_MEMBERSHIP_URL=http://membership:8080 # container url

  money:
    image: payment-money:0.0.1
    networks:
      - payment_network
    ports:
      - '8083:8080'
    depends_on:
      - mysql
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/payment?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5InnoDBDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=org.service.logging.out.stdout

  zookeeper:
    image: 'arm64v8/zookeeper:3.8'
    networks:
      - payment_network
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_TLS_CLIENT_AUTH=none
      - ZOO_TLS_QUORUM_CLIENT_AUTH=none

  kafka:
    image: 'bitnami/kafka:3.3.2'
    networks:
      - payment_network
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=LC://kafka:29092,LX://kafka:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=LC://kafka:29092,LX://${DOCKER_HOST_IP:-localhost}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=LC:PLAINTEXT,LX:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=LC
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    networks:
      - payment_network
    ports:
      - '8989:8080'
    restart: always
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  logging-consumer:
    image: payment-logging-consumer:0.0.1
    networks:
      - payment_network
    restart: always
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_BOOTSTRAPSERVERS=kafka:29092
      - LOGGING_TOPIC=org.service.logging.out.stdout

networks:
  payment_network:
    driver: bridge

# 1. create membership image `./gradlew docker`
# 2. execyte command `docker-compose up -d`